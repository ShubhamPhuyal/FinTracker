@page "/transaction"
@using FinTracker.Services.Interface
@inject NavigationManager Nav
@using FinTracker.Models

<div class="container mt-4">
    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary" @onclick="OpenModal">Add Transaction</button>
    </div>

    <!-- Display Total Inflow and Outflow -->
    <div class="mb-3 d-flex justify-content-between">
        <div class="text-success">
            <strong>Total Inflow:</strong> @TotalInflow
        </div>
        <div class="text-danger">
            <strong>Total Outflow:</strong> @TotalOutflow
        </div>
    </div>

    <!-- Filter and Search -->
    <div class="mb-3">
        <label>Search Title: </label>
        <input type="text" @bind="searchTitle" class="form-control me-2" style="display: inline-block; width: auto;" @bind:after="FilterTransactions" />

        <label>Date From: </label>
        <input type="date" @bind="fromDate" class="form-control me-2" style="display: inline-block; width: auto;" @bind:after="FilterTransactions" />
        <label>Date To: </label>
        <input type="date" @bind="toDate" class="form-control me-2" style="display: inline-block; width: auto;" @bind:after="FilterTransactions" />

        <label>Type: </label>
        <select class="form-select me-2" @bind="selectedType" style="display: inline-block; width: auto;" @bind:after="FilterTransactions">
            <option value="">All</option>
            <option value="Income">Income</option>
            <option value="Expense">Expense</option>
        </select>

        <label>Tags: </label>
        <select class="form-select" @bind="selectedTag" style="display: inline-block; width: auto;" @bind:after="FilterTransactions">
            <option value="">All</option>
            @foreach (var tag in availableTags)
            {
                <option value="@tag">@tag</option>
            }
        </select>
    </div>

    <!-- Transactions List -->
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Date</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Description</th>
                <th>Tags</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in FilteredTransactions)
            {
                <tr>
                    <td>@transaction.Title</td>
                    <td>@transaction.Date.ToShortDateString()</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Type</td>
                    <td>@transaction.Description</td>
                    <td>@transaction.Tags</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@* Modal for Adding Transaction *@
@if (showModal)

{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }
                    <div class="mb-3">
                        <label>Title</label>
                        <input type="text" class="form-control" @bind="newTransaction.Title" />
                    </div>
                    <div class="mb-3">
                        <label>Description</label>
                        <input type="text" class="form-control" @bind="newTransaction.Description" />
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newTransaction.Date" />
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newTransaction.Amount" />
                    </div>
                    <div class="mb-3">
                        <label>Type</label>
                        <select class="form-control" @bind="newTransaction.Type">
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>Tags</label>
                        <select class="form-control" @bind="newTransaction.Tags">
                            <option value="Fuel">Fuel</option>
                            <option value="Car">Car</option>
                            <option value="Bike">Bike</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="async () => await AddTransaction()">Add</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string errorMessage;

    private Models.Transaction newTransaction = new Models.Transaction();

    private bool showModal = false;

    private List<Models.Transaction> transactions = new List<Models.Transaction>();

    private DateTime? fromDate;

    private DateTime? toDate;

    private string selectedType = "";

    private string selectedTag = "";

    private string searchTitle = "";

    private List<string> availableTags = new List<string>();



    private decimal TotalInflow => transactions.Where(t => t.Type == "Income").Sum(t => t.Amount);

    private decimal TotalOutflow => transactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);



    private IEnumerable<Models.Transaction> FilteredTransactions => transactions.Where(t =>

        (string.IsNullOrEmpty(searchTitle) || t.Title.Contains(searchTitle, StringComparison.OrdinalIgnoreCase)) &&

        (!fromDate.HasValue || t.Date >= fromDate) &&

        (!toDate.HasValue || t.Date <= toDate) &&

        (string.IsNullOrEmpty(selectedType) || t.Type == selectedType) &&

        (string.IsNullOrEmpty(selectedTag) || t.Tags == selectedTag));



    protected override async Task OnInitializedAsync()

    {

        await LoadTransactions();

        UpdateAvailableTags();

    }



    private async Task LoadTransactions()

    {

        try

        {

            transactions = await TransactionService.GetAllTransactions();

            UpdateAvailableTags();

        }

        catch (Exception ex)

        {

            Console.WriteLine($"Error loading transactions: {ex.Message}");

        }

    }



    private void UpdateAvailableTags()

    {

        availableTags = transactions.Select(t => t.Tags).Distinct().ToList();

    }



    private void OpenModal()

    {

        newTransaction = new Models.Transaction

            {

                Date = DateTime.Now,

                Type = "Income" // Set a default type value

            };

        showModal = true;

    }



    private void CloseModal() => showModal = false;



    private async Task AddTransaction()

    {

        try

        {

            if (string.IsNullOrWhiteSpace(newTransaction.Description))

                throw new Exception("Description is required.");



            if (newTransaction.Amount <= 0)

                throw new Exception("Amount must be greater than zero.");



            if (string.IsNullOrWhiteSpace(newTransaction.Type))

                throw new Exception("Type is required.");



            await TransactionService.AddTransaction(newTransaction);

            transactions.Add(newTransaction);

            CloseModal();

            UpdateAvailableTags(); // Update available tags after adding a new transaction

        }

        catch (Exception ex)

        {

            errorMessage = ex.Message;

        }

    }



    private void FilterTransactions()

    {

        StateHasChanged(); // Trigger UI update

    }
}
