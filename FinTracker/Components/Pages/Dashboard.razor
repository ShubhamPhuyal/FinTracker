@page "/dashboard"
@using FinTracker.Services.Interface
@inject NavigationManager Nav
@using FinTracker.Models

<style>
        .container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 1.5rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 16px;
            text-align: center;
            position: relative;
            overflow: hidden;
            transition: transform 0.2s;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }

        .stat-card:hover {
            transform: translateY(-4px);
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
        }

        .stat-inflow::before { background: #22c55e; }
        .stat-outflow::before { background: #ef4444; }
        .stat-debt::before { background: #f59e0b; }
        .stat-remaining::before { background: #3b82f6; }
        .stat-cleared::before { background: #6b7280; }

        .stat-card h5 {
            color: #64748b;
            font-size: 0.875rem;
            font-weight: 600;
            margin: 0 0 0.5rem 0;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .stat-card h2 {
            color: #1e293b;
            font-size: 2rem;
            margin: 0;
            font-family: 'Monaco', monospace;
        }

        .dashboard-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .dashboard-card {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }

        .dashboard-card h5 {
            color: #1e293b;
            font-size: 1.25rem;
            margin: 0 0 1.5rem 0;
            font-weight: 600;
        }

        .transaction-sort {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            margin-bottom: 1rem;
            font-size: 0.875rem;
            color: #475569;
        }

        .transaction-list {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .transaction-item {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr 1fr;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 8px;
            align-items: center;
            font-size: 0.875rem;
        }

        .transaction-item span {
            color: #475569;
        }

        .transaction-item .text-success {
            color: #22c55e;
            font-weight: 500;
        }

        .transaction-item .text-danger {
            color: #ef4444;
            font-weight: 500;
        }

        .debt-table {
            width: 100%;
            border-collapse: collapse;
        }

        .debt-table th {
            background: #f8fafc;
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            color: #475569;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            border-bottom: 2px solid #e2e8f0;
        }

        .debt-table td {
            padding: 1rem;
            color: #1e293b;
            border-bottom: 1px solid #e2e8f0;
            font-size: 0.875rem;
        }

        .debt-table tr:nth-child(even) {
            background: #f8fafc;
        }

        .chart-container {
            background: #f8fafc;
            border-radius: 8px;
            padding: 1.5rem;
            text-align: center;
            color: #64748b;
        }

        
            
         
</style>

<div class="container">
    <div class="stats-grid">
        <div class="stat-card stat-inflow">
            <h5>Total Inflows</h5>
            <h2>@totalIncome</h2>
        </div>
        <div class="stat-card stat-outflow">
            <h5>Total Outflows</h5>
            <h2>@totalExpense</h2>
        </div>
        <div class="stat-card stat-debt">
            <h5>Total Debt</h5>
            <h2>@totalDebt</h2>
        </div>
        <div class="stat-card stat-remaining">
            <h5>Remaining Debt</h5>
            <h2>@remainingDebt</h2>
        </div>
        <div class="stat-card stat-cleared">
            <h5>Cleared Debt</h5>
            <h2>@clearedDebt</h2>
        </div>
    </div>

    <div class="dashboard-row">
        <div class="dashboard-card">
            <h5>Financial Overview</h5>
            <div class="chart-container">
                <p>TASK NO 4: ***Please add some charts here everyone!***</p>
            </div>
        </div>
        <div class="dashboard-card">
            <h5>Top Transactions</h5>
            <select class="transaction-sort" @bind="transactionSortOrder" @bind:after="SortTransactions">
                <option value="highest">Highest Transactions</option>
                <option value="lowest">Lowest Transactions</option>
            </select>
            <div class="transaction-list">
                @foreach (var transaction in TopTransactions)
                {
                    <div class="transaction-item">
                        <span>@transaction.Description</span>
                        <span>@transaction.Date.ToString("yyyy-MM-dd")</span>
                        <span>$@transaction.Amount.ToString()</span>
                        <span class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">@transaction.Type</span>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="dashboard-card">
        <h5>Debt Details</h5>
        <table class="debt-table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Due Date</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var debt in debts)
                {
                    <tr>
                        <td>@debt.Title</td>
                        <td>$@debt.Amount</td>
                        <td>@debt.DueDate.ToShortDateString()</td>
                        <td>@debt.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-labelledby="successModalLabel" aria-hidden="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="successModalLabel">Transaction Successful</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseSuccessModal"></button>
                </div>
                <div class="modal-body">
                    <p>@successMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSuccessModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Error</h5>
                    <button type="button" class="btn-close" @onclick="CloseErrorModal"></button>
                </div>
                <div class="modal-body">
                    <p>@errorMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseErrorModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string errorMessage;
    private string successMessage;
    private string transactionSortOrder = "highest";

    protected override void OnInitialized()
    {
        CalculateTotals();
    }

    private Models.Transaction newTransaction = new Models.Transaction();
    private bool showModal = false;

    private List<Models.Debt> debts = new List<Models.Debt>();

    private decimal totalIncome;
    private decimal totalExpense;
    private decimal totalDebt;
    private decimal remainingDebt;
    private decimal clearedDebt;

    private List<Models.Transaction> transactions = new List<Models.Transaction>();

    private async Task LoadTransactions()
    {
        try
        {
            transactions = await TransactionService.GetAllTransactions();
            SortTransactions();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }

    private void SortTransactions()
    {
        if (transactionSortOrder == "highest")
        {
            TopTransactions = transactions.OrderByDescending(t => t.Amount).Take(5).ToList();
        }
        else if (transactionSortOrder == "lowest")
        {
            TopTransactions = transactions.OrderBy(t => t.Amount).Take(5).ToList();
        }
    }

    private List<Models.Transaction> TopTransactions { get; set; }

    // Fields for date range filtering
    private DateTime? fromDate;
    private DateTime? toDate;

    private void OpenModal()
    {
        newTransaction = new Models.Transaction();
        newTransaction.Date = DateTime.Now;
        showModal = true;
    }

    private void CalculateTotals()
    {
        totalIncome = transactions
            .Where(t => t.Type == "Income")
            .Sum(t => t.Amount);

        totalExpense = transactions
            .Where(t => t.Type == "Expense")
            .Sum(t => t.Amount);

        totalDebt = debts.Sum(d => d.Amount);
        remainingDebt = debts.Where(d => d.Status == "Pending").Sum(d => d.Amount);
        clearedDebt = debts.Where(d => d.Status == "Cleared").Sum(d => d.Amount);
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void CloseSuccessModal()
    {
        successMessage = null;
    }

    private void CloseErrorModal()
    {
        errorMessage = null;
    }

    private async Task LoadDebts()
    {
        try
        {
            debts = await DebtService.GetAllDebts();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading debts: {ex.Message}");
        }
        CalculateTotals();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions();
        await LoadDebts();
    }
}
