@page "/home"
@using FinTracker.Services.Interface
@inject NavigationManager Nav
@using FinTracker.Models

<button class="btn btn-lg btn-secondary" @onclick="ShowLogoutConfirmation" style="position: fixed; top: 20px; right: 20px; z-index: 1000;">
    Logout
</button>

<style>
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
    }

    .chart-container {
        height: 300px;
    }

    .transaction-list {
        margin-top: 20px;
    }

    .transaction-item {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }
</style>

<div class="container mt-4">
    <h3 style="color:green">Available Balance = Total inflow + Debt - Total Outflow</h3>

    <div class="row">
        <div class="col-md-4">
            <div class="dashboard-card bg-success text-white text-center">
                <h5>Total Inflows</h5>
                <h2>@totalIncome</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-danger text-white text-center">
                <h5>Total Outflows</h5>
                <h2>@totalExpense</h2> <!-- Updated to use dynamic totalExpense -->
            </div>
        </div>
        <div class="col-md-4">
            <div class="dashboard-card bg-warning text-white text-center">
                <h5>Total Debt</h5>
                <h2>@totalDebt</h2> <!-- Updated to use dynamic totalDebt -->
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-primary" @onclick="OpenModal">Add Transaction</button>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="dashboard-card">
                <h5>Financial Overview</h5>
                <div class="chart-container">
                    <p>TASK NO 4: ***Please add some charts here everyone!***</p>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="dashboard-card">
                <h5>Top Transactions</h5>
                @*TASK NO 3: Need From and to dates selector to filter data in transactions to show below*@
                <div class="transaction-list">
                    @foreach (var transaction in transactions)
                    {
                        <div class="transaction-item">
                            <span>@transaction.Description</span>
                            <span>@transaction.Date.ToString("yyyy-MM-dd")</span>
                            <span>@transaction.Amount.ToString()</span>
                            <span class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">@transaction.Type</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Date Range Filter -->
<div class="mb-3">
    <label for="fromDate" class="form-label">From Date</label>
    <input type="date" class="form-control" id="fromDate" @bind="fromDate" />

    <label for="toDate" class="form-label mt-2">To Date</label>
    <input type="date" class="form-control" id="toDate" @bind="toDate" />
</div>

<!-- Transactions List -->
<table class="table">
    <thead>
    <tr>
        Tags = newTransaction.Tags,
        Title = newTransaction.Title
        <th>Title</th>
        <th>Date</th>
        <th>Amount</th>
        <th>Type</th>
        <th>Description</th>
        <td>Tags</td>
    </tr>
    </thead>
    <tbody>
    @foreach (var transaction in FilteredTransactions)
    {
        <tr>
            <td>@transaction.Title</td>
            <td>@transaction.Date.ToShortDateString()</td>
            <td>@transaction.Amount</td>
            <td>@transaction.Type</td>
            <td>@transaction.Description</td>
            <td>@transaction.Tags</td>
        </tr>
    }
    </tbody>
</table>



@* Modal for Adding Transaction *@
@if (showModal)
{
<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Transaction</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <!-- Display error message if there is any -->
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
                }
                <div class="mb-3">
                    <label>Title</label>
                    <input type="text" class="form-control" @bind="newTransaction.Title" />
                </div>    
                <div class="mb-3">
                    <label>Description</label>
                    <input type="text" class="form-control" @bind="newTransaction.Description" />
                </div>
                <div class="mb-3">
                    <label>Date</label>
                    <input type="date" class="form-control" @bind="newTransaction.Date" />
                </div>
                <div class="mb-3">
                    <label>Amount</label>
                    <input type="number" class="form-control" @bind="newTransaction.Amount" />
                </div>

                <div class="mb-3">
                    <label>Source</label>
                    <input type="text" class="form-control" @bind="newDebt.Source" />
                </div>
                <div class="mb-3">
                    <label>Due Date</label>
                    <input type="date" class="form-control" @bind="newDebt.DueDate" />
                </div>
                
                
                
                <div class="mb-3">
                    <label>Type</label>
                    <select class="form-control" @bind="newTransaction.Type">
                        
                        <option value=""></option>
                        <option value="Income">Income</option>
                        <option value="Expense">Expense</option>
                        <option value="Debt">Debt</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label>Tags</label>
                    <select class="form-control" @bind="newTransaction.Tags">

                        <option value=""></option>
                        <option value="Fuel">Fuel</option>
                        <option value="Car">Car</option>
                        <option value="Bike">Bike</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="AddTransaction">Add</button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>
}

<!-- Success Modal -->
@if (!string.IsNullOrEmpty(successMessage))
{
<div class="modal fade show" tabindex="-1" style="display: block;" aria-labelledby="successModalLabel" aria-hidden="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="successModalLabel">Transaction Successful</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseSuccessModal"></button>
            </div>
            <div class="modal-body">
                <p>@successMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseSuccessModal">Close</button>
            </div>
        </div>
    </div>
</div>
}

<!-- Error Modal -->
@if (!string.IsNullOrEmpty(errorMessage))
{
<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
                <button type="button" class="btn-close" @onclick="CloseErrorModal"></button>
            </div>
            <div class="modal-body">
                <p>@errorMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseErrorModal">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>
}


@if (IslogOut)
{
<div class="modal" tabindex="-1" role="dialog" style="display: block; background-color: rgba(0, 0, 0, 0.5); position: fixed; top: 0; left: 0; width: 100%; height: 100%; overflow: auto;">
    <div class="modal-dialog" role="document" style="margin-top: 20%; margin-left: auto; margin-right: auto; max-width: 400px;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Logout</h5>
                <button type="button" class="close" @onclick="HideLogoutConfirmation">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to logout?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideLogoutConfirmation">No</button>
                <button type="button" class="btn btn-primary" @onclick="Logout">Yes</button>
            </div>
        </div>
    </div>
</div>
}


@code {
    private string errorMessage;
    private string successMessage;

    protected override void OnInitialized()
    {
        CalculateTotals();
    }

    <!--public class Transaction
    {
        public string Description { get; set; }
        public DateTime Date { get; set; }
        public decimal Amount { get; set; }
        public string Type { get; set; }
    } -->
    
    
    private Models.Transaction newTransaction = new Models.Transaction();
    private bool showModal = false;
    
    private Models.Debt newDebt = new Models.Debt();
    

    private decimal totalIncome;
    private decimal totalExpense;
    private decimal totalDebt;

    private List<Models.Transaction> transactions = new List<Models.Transaction>();
    
    private async Task LoadTransactions()
    {
        try
        {
            // Fetch all transactions from the service
            transactions = await TransactionService.GetAllTransactions();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
            // You can handle the error as needed, e.g., by showing an error message
        }
    }
    
    
    // Fields for date range filtering
    private DateTime? fromDate;
    private DateTime? toDate;

    private void OpenModal()
    {
        newTransaction = new Models.Transaction();
        newTransaction.Date = DateTime.Now;
        showModal = true;
    }

    private void CalculateTotals()
    {
        totalIncome = transactions
            .Where(t => t.Type == "Income")
            .Sum(t => t.Amount);

        totalExpense = transactions
            .Where(t => t.Type == "Expense")
            .Sum(t => t.Amount);

        totalDebt = transactions
            .Where(t => t.Type == "Debt")
            .Sum(t => t.Amount);
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void CloseSuccessModal()
    {
        successMessage = null;
    }

    private void CloseErrorModal()
    {
        errorMessage = null;
    }

    private async void AddTransaction()
    {
        try
        {
            if (newTransaction != null)
            {
                // Validate the transaction fields
                if (string.IsNullOrWhiteSpace(newTransaction.Description) || newTransaction.Description.Any(char.IsDigit))
                {
                    throw new Exception("Description cannot be empty or contain numbers.");
                }

                if (newTransaction.Amount <= 0)
                {
                    throw new Exception("Amount must be greater than zero.");
                }

                if (string.IsNullOrWhiteSpace(newTransaction.Type))
                {
                    throw new Exception("Transaction type is required.");
                }

                // Call the service to add the transaction
                await TransactionService.AddTransaction(new Models.Transaction
                {
                    Description = newTransaction.Description,
                    Date = newTransaction.Date == default ? DateTime.Now : newTransaction.Date,
                    Amount = newTransaction.Amount,
                    Type = newTransaction.Type,
                    Tags = newTransaction.Tags,
                    Title = newTransaction.Title
                });
                if (newTransaction.Type == "Debt")
                {
                    await DebtService.AddDebt(new Models.Debt
                    {
                        Title = newTransaction.Title,
                        Status = "Pending",
                        Amount = newTransaction.Amount,
                        DueDate = newDebt.DueDate,
                        ClearedDate = null,
                        Source = newDebt.Source
                    });
                }
                

                // Recalculate totals and reset the form
                CalculateTotals();
                successMessage = "Your transaction is complete.";
                errorMessage = null;
                newTransaction = new Models.Transaction(); // Reset the form data
                CloseModal(); // Close the modal
            }
            else
            {
                throw new Exception("Transaction data is invalid.");
            }
        }
        catch (Exception ex)
        {
            // Log the error and display the error message
            Console.WriteLine($"Error adding transaction: {ex.Message}");
            errorMessage = ex.Message;
            successMessage = null;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions();
        CalculateTotals();
    }
    
    // Filtered transactions based on date range
    private IEnumerable<Models.Transaction> FilteredTransactions =>
        transactions.Where(t => (!fromDate.HasValue || t.Date >= fromDate) &&
                                (!toDate.HasValue || t.Date <= toDate));
    
}


